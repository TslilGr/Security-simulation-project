//
// Generated file, do not edit! Created by nedtool 5.4 from message.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>message.msg:1</tt> by nedtool.
 * <pre>
 * message Msg
 * {
 *     string ip;
 *     int type;
 * }
 * </pre>
 */
class Msg : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string ip;
    int type;

  private:
    void copy(const Msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Msg&);

  public:
    Msg(const char *name=nullptr, short kind=0);
    Msg(const Msg& other);
    virtual ~Msg();
    Msg& operator=(const Msg& other);
    virtual Msg *dup() const override {return new Msg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getIp() const;
    virtual void setIp(const char * ip);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Msg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Msg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:6</tt> by nedtool.
 * <pre>
 * message Entropy
 * {
 * }
 * </pre>
 */
class Entropy : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const Entropy& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Entropy&);

  public:
    Entropy(const char *name=nullptr, short kind=0);
    Entropy(const Entropy& other);
    virtual ~Entropy();
    Entropy& operator=(const Entropy& other);
    virtual Entropy *dup() const override {return new Entropy(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Entropy& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Entropy& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MESSAGE_M_H

